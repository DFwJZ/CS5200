<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/jasonzhang/Documents/Align_Course/Fall2023/CS5200/Assignment/assignment3/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3287"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,14:mainFilteredTracks"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="FilteredTracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="47"/><column index="2" value="73"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">
-- Creating MusicVideo Table
DROP TABLE IF EXISTS MusicVideo;
CREATE TABLE MusicVideo (
TrackId INTEGER PRIMARY KEY,
VideoDirector TEXT,
FOREIGN KEY (TrackId) REFERENCES tracks(TrackID)
);

-- Insert 10 videos
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (1, &quot;Director 001&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (2, &quot;Director 002&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (3, &quot;Director 003&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (4, &quot;Director 004&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (5, &quot;Director 005&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (6, &quot;Director 006&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (7, &quot;Director 007&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (8, &quot;Director 008&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (9, &quot;Director 009&quot;);
INSERT INTO MusicVideo (TrackId, VideoDirector) VALUES (10, &quot;Director 010&quot;);

-- Insert Voodoo to MusicVideo without using TrackID
SELECT TrackId FROM tracks WHERE Name = &quot;Voodoo&quot;;

INSERT INTO MusicVideo (TrackId, VideoDirector)
SELECT TrackId, &quot;Director Voodoo&quot;
FROM tracks
WHERE Name == &quot;Voodoo&quot;;

SELECT * FROM tracks WHERE Name = &quot;Voodoo&quot;;


--Write a query that lists all the customers that listen to longerthan average tracks, excluding the tracks that are longer than 15 minutes.
-- 1. Calculate the avg duration
SELECT AVG(Milliseconds) AS avg_length
FROM tracks;

-- 2. Create a intermediate view to filter the tracks that is either shorter than the average or longer than 15 minutes.
DROP VIEW IF EXISTS FilteredTracks;
CREATE VIEW FilteredTracks AS
SELECT DISTINCT TrackId, Milliseconds
FROM tracks
WHERE Milliseconds &gt; (SELECT AVG(Milliseconds) FROM tracks)
AND Milliseconds &lt;= 60*1000*15;

--3. Select distinct customers with their first name and last name
SELECT DISTINCT
customers.FirstName AS firstname,
customers.LastName AS lastname
FROM FilteredTracks
JOIN invoice_items USING(TrackId)
JOIN invoices USING(InvoiceId)
JOIN customers USING(CustomerId);

-- Write a query that lists all the tracks that are not in one of the top 5 genres with longer duration in the database.
DROP VIEW IF EXISTS genre_track_length_ordered;
CREATE VIEW genre_track_length_ordered AS
SELECT genres.Name AS name, genres.GenreId AS gid,
AVG(tracks.Milliseconds) AS avg_length
FROM tracks
JOIN genres USING(GenreId)
GROUP by genres.GenreId;

-- 2: Identify the top 5 genres with the longest average duration
DROP VIEW IF EXISTS top_5_longest_genres;
CREATE VIEW top_5_longest_genres AS
SELECT gid
FROM genre_track_length_ordered
ORDER by avg_length DESC
LIMIT 5;

-- 3: Filter out tracks that belong to one of these top 5 genres
SELECT tracks.TrackId, tracks.Name, tracks.Milliseconds
FROM tracks
WHERE tracks.GenreId NOT IN (SELECT gid FROM top_5_longest_genres);


--Define an insightful query on your own that involves at least three tables

-- Write a query to get a list of tracks that are part of invoices with a total billing amount over $5.
-- 1. Calculate the average track length in the database
-- 2. Identify invoices with a total billing amount over 5
SELECT
invoices.Total AS BillingAmount,
tracks.Name AS TrackName,
tracks.Milliseconds * 1.0 / (1000 * 60) AS TrackLengthInMinutes
FROM invoices
JOIN invoice_items USING(InvoiceId)
JOIN tracks USING (TrackId)
WHERE invoices.Total &gt; 5
AND tracks.Milliseconds &lt; (SELECT AVG(Milliseconds) FROM tracks)
AND tracks.Milliseconds &gt; 3 * 60 * 1000
ORDER BY TrackLengthInMinutes;




</sql><current_tab id="0"/></tab_sql></sqlb_project>
